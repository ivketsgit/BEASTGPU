{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8dbc2075-f494-4109-92ba-c470fd6789bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "plt.rcParams.update({'font.size': 12})  # Change 14 to your desired font size\n",
    "from matplotlib.ticker import ScalarFormatter\n",
    "from dataclasses import dataclass, field\n",
    "from typing import List\n",
    "import re\n",
    "import statistics\n",
    "\n",
    "from pathlib import Path\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8b932af0-3ee2-4568-8d0f-6a02a09b2291",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def merge_paths(*paths):\n",
    "    return Path(paths[0]).joinpath(*paths[1:])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e221d5e0-fdb3-4fad-abff-0be5cd3eddae",
   "metadata": {},
   "outputs": [],
   "source": [
    "@dataclass\n",
    "class BenchmarkResult:\n",
    "    duration: float\n",
    "    runs: int\n",
    "    min: float\n",
    "    mean: float\n",
    "    max: float\n",
    "    std: float\n",
    "    median: float\n",
    "    percentile_75: float\n",
    "\n",
    "@dataclass\n",
    "class BenchmarkSuite:\n",
    "    results: List[BenchmarkResult] = field(default_factory=list)\n",
    "\n",
    "    def add_result(self, result: BenchmarkResult):\n",
    "        self.results.append(result)\n",
    "\n",
    "    def average(self) -> BenchmarkResult:\n",
    "        count = len(self.results)\n",
    "        if count == 0:\n",
    "            raise ValueError(\"No results to average.\")\n",
    "        \n",
    "        return BenchmarkResult(\n",
    "            duration=sum(r.duration for r in self.results) / count,\n",
    "            runs=sum(r.runs for r in self.results) // count,\n",
    "            min=min(r.min for r in self.results),\n",
    "            mean=statistics.mean(r.mean for r in self.results),\n",
    "            max=max(r.max for r in self.results),\n",
    "            std=statistics.mean(r.std for r in self.results),\n",
    "            median=statistics.mean(r.median for r in self.results),\n",
    "            percentile_75=statistics.mean(r.percentile_75 for r in self.results),\n",
    "        )\n",
    "\n",
    "def parse_benchmark_file(text: str) -> BenchmarkSuite:\n",
    "    suite = BenchmarkSuite()\n",
    "\n",
    "    # Pattern to match each benchmark block\n",
    "    block_pattern = re.compile(\n",
    "        r\"Manual Benchmark of duration ([\\d.]+) over (\\d+) runs:\\s*\"\n",
    "        r\"Min: ([\\d.]+) s\\s*\"\n",
    "        r\"Mean: ([\\d.]+) s\\s*\"\n",
    "        r\"Max: ([\\d.]+) s\\s*\"\n",
    "        r\"Std: ([\\d.]+) s\\s*\"\n",
    "        r\"2nd Quartile \\(Median\\): ([\\d.]+) s\\s*\"\n",
    "        r\"3rd Quartile \\(75th percentile\\): ([\\d.]+) s\",\n",
    "        re.MULTILINE\n",
    "    )\n",
    "\n",
    "    for match in block_pattern.finditer(text):\n",
    "        result = BenchmarkResult(\n",
    "            duration=float(match.group(1)),\n",
    "            runs=int(match.group(2)),\n",
    "            min=float(match.group(3)),\n",
    "            mean=float(match.group(4)),\n",
    "            max=float(match.group(5)),\n",
    "            std=float(match.group(6)),\n",
    "            median=float(match.group(7)),\n",
    "            percentile_75=float(match.group(8)),\n",
    "        )\n",
    "        suite.add_result(result)\n",
    "\n",
    "    return suite\n",
    "\n",
    "def read_benchmark_file(content):\n",
    "    match = re.search(r'\\[(.*?)\\]', content)\n",
    "    if not match:\n",
    "        raise ValueError(\"No array found in file.\")\n",
    "    data_str = match.group(1)\n",
    "    times = [float(x.strip()) for x in data_str.split(',')]\n",
    "    return times\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7809730c-825e-4705-89fa-281de64a801e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c18e2fe2-2d2b-46fa-86ef-a7a1fb3475cf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[24 30 33 36 38 40]\n",
      "[ 764411904 1866240000 2732361984 3869835264 4804153344 5898240000]\n",
      "\n",
      "[ 18.73208504  42.63754319  58.89047799  85.03566783  96.34026952\n",
      " 102.31332785]\n",
      "[ 6.60305733 30.2097956  36.45552574 59.92075224 60.87028094 63.99198662]\n",
      "[ 22.27656608  48.09812702  64.64242138  97.12370075 103.60064636\n",
      " 134.16006505]\n",
      "[ 1.49406933  1.52623671  2.09184034  3.09855436  2.24268649 10.05585574]\n",
      "[0.04416257 0.10241137 0.15133345 0.21480449 0.2679415  0.32858212]\n",
      "[0.04124683 0.10058473 0.14881884 0.21133739 0.26509438 0.32659373]\n",
      "[0.10887496 0.16590986 0.1767675  0.22337586 0.35597581 0.33913135]\n",
      "[0.0068545  0.00767642 0.00265867 0.00142881 0.00915305 0.00186919]\n"
     ]
    }
   ],
   "source": [
    "path = \"BEASTGPU/data\"\n",
    "with open(merge_paths(path, \"graph_data.jl\"), \"r\") as f:\n",
    "    content = f.read()\n",
    "density_values = re.search(r'density_values\\s*=\\s*\\[([^\\]]+)\\]', content)\n",
    "intgral_amount = re.search(r'intgral_amount\\s*=\\s*\\[([^\\]]+)\\]', content)\n",
    "\n",
    "if density_values and intgral_amount:\n",
    "    density_list = np.array(list(map(int, density_values.group(1).split(','))))\n",
    "    intgral_list = np.array(list(map(int, intgral_amount.group(1).split(','))))\n",
    "else:\n",
    "    print(\"One or both arrays not found.\")\n",
    "\n",
    "print(density_list)\n",
    "print(intgral_list)\n",
    "print(\"\")\n",
    "\n",
    "\n",
    "\n",
    "CPU_median = []\n",
    "CPU_min = []\n",
    "CPU_max = []\n",
    "CPU_std = []\n",
    "\n",
    "for density_value in density_list:\n",
    "    with open(merge_paths(path, \"CPUMultiThread\",str(density_value),\"quadrule\" + \".txt\"), \"r\") as f:\n",
    "        content = f.read()\n",
    "    suite = parse_benchmark_file(content)\n",
    "    average_result = suite.average()\n",
    "    \n",
    "    CPU_median.append(average_result.median)\n",
    "    CPU_min.append(average_result.min)\n",
    "    CPU_max.append(average_result.max)\n",
    "    CPU_std.append(average_result.std)\n",
    "\n",
    "\n",
    "CPU_median = np.array(CPU_median).flatten()\n",
    "CPU_min = np.array(CPU_min).flatten()\n",
    "CPU_max = np.array(CPU_max).flatten()\n",
    "CPU_std = np.array(CPU_std).flatten()\n",
    "\n",
    "print(CPU_median)\n",
    "print(CPU_min)\n",
    "print(CPU_max)\n",
    "print(CPU_std)\n",
    "\n",
    "\n",
    "GPU_median = []\n",
    "GPU_min = []\n",
    "GPU_max = []\n",
    "GPU_std = []\n",
    "\n",
    "for density_value in density_list:\n",
    "    with open(merge_paths(path, \"GPU\",str(density_value),\"quadrule_types_gpu\" + \".txt\"), \"r\") as f:\n",
    "        content = f.read()\n",
    "    times = np.array(read_benchmark_file(content))\n",
    "\n",
    "    GPU_median.append(np.median(times))\n",
    "    GPU_min.append(np.min(times))\n",
    "    GPU_max.append(np.max(times))\n",
    "    GPU_std.append(np.std(times))\n",
    "\n",
    "\n",
    "GPU_median = np.array(GPU_median)\n",
    "GPU_min = np.array(GPU_min)\n",
    "GPU_max = np.array(GPU_max)\n",
    "GPU_std = np.array(GPU_std)\n",
    "\n",
    "print(GPU_median)\n",
    "print(GPU_min)\n",
    "print(GPU_max)\n",
    "print(GPU_std)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c5fbcd95-2ca7-4439-a21c-58725598da4b",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Ian\\AppData\\Local\\Temp\\ipykernel_25460\\3965295775.py:20: UserWarning: Attempt to set non-positive ylim on a log-scaled axis will be ignored.\n",
      "  plt.ylim(bottom=0)\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(10, 6))\n",
    "\n",
    "ax.plot(intgral_list, CPU_median , marker='o', label='CPU', color='blue')\n",
    "ax.plot(intgral_list, GPU_median , marker='s', label='GPU', color='orange')\n",
    "\n",
    "ax.set_xlabel('element pairs', fontsize=24)\n",
    "ax.set_ylabel('Execution \\nTime (s)', fontsize=24)\n",
    "#ax.set_title('Execution Time vs threads', fontsize=24)\n",
    "\n",
    "ax.tick_params(axis='both', labelsize=24)\n",
    "ax.set_yscale('log')\n",
    "\n",
    "\n",
    "fig.canvas.draw()\n",
    "offset_text = ax.xaxis.get_offset_text()\n",
    "offset_text.set_size(24)  # Set font size of '1e9'\n",
    "\n",
    "ax.legend(fontsize=24)\n",
    "\n",
    "plt.ylim(bottom=0)\n",
    "ax.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.savefig(\"graphs/Quadrature_GPU_vs_CPU.svg\", format='svg')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6471b62e-5d8e-4b71-bf62-c81219add19c",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[424.16202793 416.33602366 389.14383671 395.87471865 359.55710771\n",
      " 311.3782576 ]\n",
      "[0.7644119  1.86624    2.73236198 3.86983526 4.80415334 5.89824   ]\n"
     ]
    }
   ],
   "source": [
    "speedup = CPU_median / GPU_median\n",
    "print(speedup)\n",
    "print(intgral_list/10**(9))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5e2fd45f-65af-481c-b84a-6c3c6869e37b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "748e7c3e-1bd1-4478-adcd-a22c408a5d9b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6e8d1cff-bd73-4ee9-a5b8-f4f052debcce",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
